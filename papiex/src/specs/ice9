# cost table in cycles
# prefix constants with ::
$::L1_LINE_SIZE = 128;
$::L2_LINE_SIZE = 128;
$::L2_PRIVATE_HIT_COST = 16;
$::L2_OTHER_HIT_COST = 60;
$::MEM_ACCESS_COST = 50;
$::TLB_MISS_COST = 2;
$::TLB_TRAP_COST = 40;
$::BRANCH_MISPREDICTION_COST = 1;
$::M_STAGE_COST =1 ;

MFLOPS Aggregate (wallclock)  : Aggregate flops across tasks/threads per _wallclock_ second
                              : = (CPU_FPARITH+CPU_FPMADD)/WALL_CLOCK_USEC
$MFLOPS = ($CPU_FPARITH+$CPU_FPMADD) * $Clockrate / $Virtual_cycles;
$IPC=$CPU_INSEXEC/$CPU_CYCLES ;
Wallclock (sec)               : Wallclock time in seconds
$Running_Time_Percent = 100 * $Virtual_usecs / $Real_usecs ;
$Running_Time_in_Domain_Percent = 100 * $CPU_CYCLES / $Virtual_cycles ;
$Memory_Instructions_Percent=100*($CPU_LOAD + $CPU_STORE)/$CPU_INSEXEC ;
$Estimated_Integer_Arithmetic_Instructions_Percent = 100 * (1-(($CPU_FPARITH+$CPU_LOAD+$CPU_STORE+$CPU_BRANCH)/$CPU_INSEXEC)) ;
$Non_FP_Instructions_Percent = 100* (1 - ($CPU_FLOAT / $CPU_INSEXEC));
$FP_Instructions_Percent = 100 * $CPU_FLOAT / $CPU_INSEXEC;
$FP_Arithmetic_Instructions_Percent = 100 * $CPU_FPARITH / $CPU_INSEXEC;
$FMA_Instructions_Percent = 100 * $CPU_FPMADD / $CPU_INSEXEC;
$Branch_Instructions_Percent = 100 * $CPU_BRANCH / $CPU_INSEXEC;
$Loads_to_Store_Ratio = $CPU_LOAD / $CPU_STORE;
$Flops_per_Load_Store  = ($CPU_FPARITH+$CPU_FPMADD)/($CPU_LOAD+$CPU_STORE) ;
$Flops_per_L1_D_cache_Miss = ($CPU_FPARITH+$CPU_FPMADD) / $CPU_DCMISS ;
$L1_D_cache_Hit_Percent = 100 * (1 - ($CPU_DCMISS / ($CPU_LOAD+$CPU_STORE)));
$L1_I_cache_Hit_Percent = 100 * (1 - ($CPU_ICMISS / ($CPU_LOAD+$CPU_STORE)));
$Private_L2_Cache_Hit_Percent  = 100 * (1 - ($CPU_L2MISS / $CPU_L2REQ));
$Other_L2_Cache_Hit_Percent = 100 * ($CPU_L2MISS - $CPU_L2MISSALL) / $CPU_L2MISS;
$L2_Miss_Percent  = 100 * $CPU_L2MISSALL / $CPU_L2REQ;
$L2_Bandwidth_in_MB_per_second =  ($CPU_L2REQ * $ICE9_L1_LINE_SIZE) / $Virtual_cycles;
$Memory_Bandwidth_in_MB_per_second = ($CPU_L2MISSALL * $ICE9_L2_LINE_SIZE) / $Virtual_cycles;
$Data_TLB_Hit_Percent = 100 *(1 - ($CPU_DTLBMISS / ($CPU_LOAD+$CPU_STORE)));
$Instruction_TLB_Hit_Percent = 100 *(1 - ($CPU_ITLBMISS / ($CPU_LOAD+$CPU_STORE)));
$Joint_TLB_Hit_Percent =100 * (1 - $CPU_TLBTRAP / ($CPU_DTLBMISS + $CPU_ITLBMISS));
$Branch_Misprediction_Percent = 100 * $CPU_MISPRED / $CPU_BRANCH;
$Dual_Issue_Percent  = 100 * $CPU_INSDUAL / $CPU_INSEXEC;
$Estimated_L2_Private_Hit_Stall_Percent = 100 * ($CPU_L2REQ - $CPU_L2MISS) * $L2_PRIVATE_HIT_COST / $CPU_CYCLES;
$Estimated_L2_Other_Hit_Stall_Percent = 100 * ($CPU_L2MISS - $CPU_L2MISSALL) * $L2_OTHER_HIT_COST / $CPU_CYCLES;
$Estimated_L2_Miss_Stall_Percent = $CPU_L2MISSALL * $MEM_ACCESS_COST / $CPU_CYCLES ;;
$Estimated_Total_Memory_Stall_Percent = $Estimated_L2_Private_Hit_Stall_Percent + $Estimated_L2_Other_Hit_Stall_Percent + $Estimated_L2_Miss_Stall_Percent;
$Estimated_D_TLB_Miss_Stall_Percent = 100 * $CPU_DTLBMISS * $TLB_MISS_COST / $CPU_CYCLES;
$Estimated_I_TLB_Miss_Stall_Percent = 100 * $CPU_ITLBMISS * $TLB_MISS_COST / $CPU_CYCLES;
$Estimated_TLB_Trap_Stall_Percent = 100 * $CPU_TLBTRAP * $TLB_TRAP_COST / $CPU_CYCLES;
$Estimated_Total_TLB_Stall_Percent = $Estimated_D_TLB_Miss_Stall_Percent+$Estimated_I_TLB_Miss_Stall_Percent+$Estimated_TLB_Trap_Stall_Percent;
$Estimated_Mispredicted_Branch_Stall_Percent = $CPU_MISPRED * $BRANCH_MISPREDICTION_COST / $CPU_CYCLES;
$M_Stage_Stall_Percent  = 100 * $CPU_MSTALL * $M_STAGE_COST / $CPU_CYCLES;

Actual/Ideal Cyc (max. dual)  : Ideal cycles assumes no stalls and maximum dual issue
                              : Ideal cycles=max(CPU_INSEXEC-CPU_FPARITH,CPU_FPARITH)+CPU_BRANCH
Ideal IPC (max. dual)         : IPC * Actual/Ideal (max. dual) cycles
Ideal MFLOPS (max. dual)      : Ideal MFLOPS [see Actual/Ideal Cyc (max. dual)]
                              : =(CPU_FPARITH+CPU_FPMADD)*MHz/Ideal cycles
Actual/Ideal Cyc (cur. dual)  : Ideal cycles assumes no stalls and current dual issue
                              : Ideal cyc=CPU_INSEXEC-CPU_INSDUAL+CPU_INSDUAL/2
Ideal IPC (cur. dual)         : IPC * Actual/Ideal (cur. dual) cycles
Ideal MFLOPS (cur. dual)      : Ideal MFLOPS [see Actual/Ideal cyc (cur. dual)]
                              : =(CPU_FPARITH+CPU_FPMADD)*MHz/Ideal cycles
MPI cycles %                  : 100 * Real cycles in MPI / Real cycles
MPI Sync cycles %             : 100 * Real cycles in MPI / Real cycles
I/O cycles %                  : 100 * Real cycles in I/O / Real cycles
Thr Sync cycles %             : 100 * Real cycles in I/O / Real usecs
Virtual                       : Counted only when executing on the processor
Real                          : Always counted, unhalted, wallclock, watch time


