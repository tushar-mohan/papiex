# cost table in cycles
# prefix constants with ::
#$::L1_LINE_SIZE = 128;
$::L1D_LATENCY = 4 ;
$::L1I_LATENCY = 4;
$::L2_LATENCY = $ENV{'PAPIEX_L2_LATENCY_CYCLES'} || 10;
$::L2_OTHER_LATENCY = $ENV{'PAPIEX_L2_OTHER_LATENCY_CYCLES'} || 74;
$::L3_LATENCY = $ENV{'PAPIEX_L3_LATENCY_CYCLES'} || 40;  # L3 unshared hit
$::L3_OTHER_CORE_LATENCY = 65;
$::L3_MODIFIED_OTHER_CORE_LATENCY = 75;
$::MEM_LATENCY = $ENV{'PAPIEX_MEM_LATENCY_CYCLES'} || 200;
$::TLB_MISS_LATENCY = 6;
$::TLB_PAGE_WALK_LATENCY = 250;

$::L1_LINE_SIZE = 64 ; 
$::L2_LINE_SIZE = 64 ; 
$::L3_LINE_SIZE = 64 ; 
$::L1_PEAK_BW = 400000; # MB/s
$::L2_PEAK_BW = 300000; # MB/s
$::L3_PEAK_BW = 100000; # MB/s
$::MEM_PEAK_BW = 30000; # MB/s
$::WORD_SIZE_BYTES = $ENV{'WORD_SIZE_BYTES'} || 8;
# Any non-comment line without variables is copied verbatim, including empty lines
# When variables contain a colon (':'), use curly braces around the entire variable. E.g., ${FP_COMP_OPS_EXE:MMX}
# Temporary variables must begin as $tmp_. E.g., $tmp_uflops
#
# Derived metrics:
#$FP_Compute_uOPS = ${FP_COMP_OPS_EXE:X87} + ${FP_COMP_OPS_EXE:MMX} + ${FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION} + ${FP_COMP_OPS_EXE:SSE_DOUBLE_PRECISION};
$FP_Compute_uOPS = ${FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION} + ${FP_COMP_OPS_EXE:SSE_DOUBLE_PRECISION};
$MFLOPS_wallclock = $FP_Compute_uOPS / $Wallclock_usecs;
$MFLOPS = $FP_Compute_uOPS / $Real_usecs;
$IPC=$INSTRUCTION_RETIRED/$UNHALTED_CORE_CYCLES ;
#$Wasted_Speculative_Execution_Percent = 100 * (${UOPS_ISSUED:ANY}/${UOPS_RETIRED:ANY} - 1);
$Instruction_Starvation_Percent = 100 * (${UOPS_ISSUED:STALLED_CYCLES} - ${RESOURCE_STALLS:ANY})/$UNHALTED_CORE_CYCLES;
$Branch_Misprediction_Percent = 100 * ${BR_MISP_EXEC:ANY} / ${BR_INST_RETIRED:ALL_BRANCHES};
$Load_Store_Ratio = ${L1D_CACHE_LD:MESI}/${L1D_CACHE_ST:MESI};
$Flops_Per_Load_Store = $FP_Compute_uOPS / (${L1D_CACHE_LD:MESI} + ${L1D_CACHE_ST:MESI});
$Flops_Per_Load_Miss = $FP_Compute_uOPS / ${L1D_CACHE_LD:I_STATE};
$Instructions_Per_Load_Miss = $INSTRUCTION_RETIRED / ${L1D_CACHE_LD:I_STATE};

Time:
$Wallclock_seconds = $Wallclock_usecs / 1000000 ;
$IO_seconds = $IO_cycles / ($::clockmhz * 1000000);

Cycles:
$Cycles_In_Domain = $UNHALTED_CORE_CYCLES;
$Real_Cycles = $Real_cycles;
$Running_Time_In_Domain_Percent = 100 * $UNHALTED_CORE_CYCLES / $Real_cycles ;
$Virtual_Cycles = $Virtual_cycles;
$IO_Cycles_Percent = 100 * $IO_cycles / $Real_cycles;
$MPI_Cycles_Percent = 100 * $MPI_cycles / $Real_cycles;
$MPI_Sync_Cycles_Percent = 100 * $MPI_Sync_cycles / $Real_cycles;
$Thread_Sync_Cycles_Percent = 100 * $Thr_Sync_cycles / $Real_cycles;

Instructions:
$Instructions_Retired = $INSTRUCTION_RETIRED;
$uOPS_Issued = ${UOPS_ISSUED:ANY};
$Branch_Instructions_Percent = 100 * ${BR_INST_RETIRED:ALL_BRANCHES} / $INSTRUCTION_RETIRED;
$FP_Compute_uOPS_Percent = 100 * $FP_Compute_uOPS / $uOPS_Issued;
$Memory_Data_uOPS_Percent = min((100 * (${L1D_CACHE_LD:MESI} + ${L1D_CACHE_ST:MESI})/$uOPS_Issued), (100 - $Branch_Instructions_Percent - $FP_Compute_uOPS_Percent)) ;
$Integer_Logical_or_Register_Move_uOPS_Percent = 100 - ($Memory_Data_uOPS_Percent + $Branch_Instructions_Percent + $FP_Compute_uOPS_Percent);
$SIMD_Integer128_Arith_Percent = 100 * (${SIMD_INT_128:PACKED_MPY} + ${SIMD_INT_128:PACKED_ARITH} + ${SSEX_UOPS_RETIRED:VECTOR_INTEGER}) / $uOPS_Issued;
$SIMD_Integer64_Arith_Percent = 100 * (${SIMD_INT_64:PACKED_MPY} +  ${SIMD_INT_64:PACKED_ARITH} ) / $uOPS_Issued;

#Reservation Units:
#$Port0_uOPS_Percent = 100 * ${UOPS_EXECUTED:PORT0} / $uOPS_Issued;
#$Port1_uOPS_Percent = 100 * ${UOPS_EXECUTED:PORT1} / $uOPS_Issued;
#$Port2_CORE_uOPS_Percent = 100 * ${UOPS_EXECUTED:PORT2_CORE} / $uOPS_Issued;
#$Port3_CORE_uOPS__Percent = 100 * ${UOPS_EXECUTED:PORT3_CORE} / $uOPS_Issued;
#$Port4_CORE_uOPS__Percent = 100 * ${UOPS_EXECUTED:PORT4_CORE} / $uOPS_Issued;
#$Port5_uOPS_Percent = 100 * ${UOPS_EXECUTED:PORT5} / $uOPS_Issued;
Memory:
$Loads_Executed = ${L1D_CACHE_LD:MESI};
$Stores_Executed = ${L1D_CACHE_ST:MESI};

$L1D_Load_Misses = ${L1D_CACHE_LD:I_STATE};
$L1D_Loads = ${L1D_CACHE_LD:MESI};
$L1D_Load_Miss_Percent = 100 * ${L1D_CACHE_LD:I_STATE} / ${L1D_CACHE_LD:MESI};
$L1D_Store_Misses = ${L1D_CACHE_ST:I_STATE};
$L1I_References = ${L1I:HITS}+${L1I:MISSES};
$L1I_Miss_Percent = 100 * ${L1I:MISSES} / (${L1I:HITS}+${L1I:MISSES});
#$L1D_Bandwidth_MBytes_per_second = (${UOPS_EXECUTED:PORT2_CORE} + ${UOPS_EXECUTED:PORT4_CORE}) * $::WORD_SIZE_BYTES / $Wallclock_usecs;
$L1D_Bandwidth_MB_per_sec = (${L1D_CACHE_LD:MESI} + ${L1D_CACHE_ST:MESI}) * $::WORD_SIZE_BYTES / $Wallclock_usecs;
$L2_to_L1_Bandwidth_MB_per_sec = ${L1D:REPL} * $::L1_LINE_SIZE / $Wallclock_usecs;
$L1_to_L2_Writeback_Bandwidth_MB_per_sec = ${L1D_WB_L2:MESI} * $::L1_LINE_SIZE / $Wallclock_usecs;

#$L2_Load_Misses = ${MEM_LOAD_RETIRED:LLC_UNSHARED_HIT}+${MEM_LOAD_RETIRED:OTHER_CORE_L2_HIT_HITM};
$L2_Load_Misses = ${L2_RQSTS:LOADS} - ${L2_RQSTS:LD_HIT};
$L2_Loads = ${L2_RQSTS:LOADS};
$L2_Load_Miss_Percent = 100 * (${L2_RQSTS:LOADS}-${L2_RQSTS:LD_HIT}) / ${L2_RQSTS:LOADS};
$L2_Stores = ${L2_DATA_RQSTS:ANY} - ${L2_RQSTS:LOADS};
$L2_Instruction_References = ${L2_RQSTS:REFERENCES} - ${L2_DATA_RQSTS:ANY};
$L2_References = ${L2_RQSTS:REFERENCES};
$L2_Miss_Percent = 100 * ${L2_RQSTS:MISS} / ${L2_RQSTS:REFERENCES};
$LLC_to_L2_Bandwidth_MB_per_sec = ${L2_LINES_IN:ANY} * $::L2_LINE_SIZE / $Wallclock_usecs;

$LLC_Load_Misses = ${MEM_LOAD_RETIRED:LLC_MISS};
$LLC_References = ${L2_RQSTS:MISS};
$LLC_Miss_Percent = 100 * $LLC_MISSES / ${L2_RQSTS:MISS};
$Main_Memory_References = $LLC_MISSES;
$Min_Memory_Bandwidth_MB_per_sec = $LLC_MISSES * $::L3_LINE_SIZE / $Wallclock_usecs;
#$Memory_Read_Bandwidth_MBytes_per_second = ${UNC_LLC_LINES_IN:ANY} * $::CACHE_LINE_SIZE / $Wallclock_usecs;

$DTLB_Load_Misses = ${MEM_LOAD_RETIRED:DTLB_MISS};
#$DTLB_Store_Misses = ${MEM_STORE_RETIRED:DTLB_MISS};
$DTLB_Load_Page_Walks = ${DTLB_LOAD_MISSES:WALK_COMPLETED};

Stalls:
$Issue_Stall_seconds = ${UOPS_ISSUED:STALLED_CYCLES} / ($::clockmhz * 1000000);
$Resource_Stall_seconds = ${RESOURCE_STALLS:ANY} / ($::clockmhz * 1000000);
$Max_L1_Load_Miss_L2_Hit_Stall_seconds = ${L2_RQSTS:LD_HIT} * $::L2_LATENCY *2 / ($::clockmhz * 1000000);
$Max_L2_Load_Miss_L3_Hit_Stall_seconds = ((${L2_RQSTS:LOADS} - ${L2_RQSTS:LD_HIT} - ${MEM_LOAD_RETIRED:OTHER_CORE_L2_HIT_HITM} - ${MEM_LOAD_RETIRED:LLC_MISS})*$::L3_LATENCY *2 + ${MEM_LOAD_RETIRED:OTHER_CORE_L2_HIT_HITM}*$::L2_OTHER_LATENCY *2)  / ($::clockmhz * 1000000);
#$Max_Memory_Read_Stall_seconds = ${MEM_LOAD_RETIRED:LLC_MISS}* $::MEM_LATENCY / ($::clockmhz * 1000000);
$Max_Memory_Read_Stall_seconds = ${LLC_MISSES}* $::MEM_LATENCY *2 / ($::clockmhz * 1000000);
$Max_TLB_LD_Miss_Stall_seconds = ${MEM_LOAD_RETIRED:DTLB_MISS} * $::TLB_MISS_LATENCY / ($::clockmhz * 1000000);
$Max_TLB_Page_Walk_Stall_seconds = ${DTLB_LOAD_MISSES:WALK_COMPLETED} * $::TLB_PAGE_WALK_LATENCY / ($::clockmhz * 1000000);

$Issue_Stall_Cycles = ${UOPS_ISSUED:STALLED_CYCLES};
$Decode_Stall_Cycles = ${ILD_STALL:ANY};
$Resource_Stall_Cycles = ${RESOURCE_STALLS:ANY};
$FP_or_ALU_No_Dispatch_Cycles = ${UOPS_EXECUTED:PORT015_STALL_CYCLES};
$RAT_Execution_Stalls = ${RAT_STALLS:ANY};
#$Retire_Stall_Cycles = ${UOPS_RETIRED:STALL_CYCLES};

Resource Stalls:
$RS_Full_Stall_Cycles_Percent = 100* ${RESOURCE_STALLS:RS_FULL} / ${RESOURCE_STALLS:ANY};
$Load_Buffer_Stall_Cycles_Percent = 100* ${RESOURCE_STALLS:LOAD} / ${RESOURCE_STALLS:ANY};
$Store_Buffer_Stall_Cycles_Percent = 100* ${RESOURCE_STALLS:STORE} / ${RESOURCE_STALLS:ANY};
$Reorder_Buffer_Stall_Cycles_Percent = 100* ${RESOURCE_STALLS:ROB_FULL} / ${RESOURCE_STALLS:ANY};

#Decode Stalls:
#$Instruction_Queue_Full_Stalls_Percent = 100 * ${ILD_STALL:IQ_FULL}/${ILD_STALL:ANY};

#Estimated Costs:
#$Estimated_Max_L1_Data_Access_Cycles =  $L1_Data_Hits * $::L1D_LATENCY;
#$Estimated_Max_L1_Instruction_Cycles =  ${L1I:HITS} * $::L1I_LATENCY;
#$Estimated_Max_L2_Access_Cycles =  ${L2_RQSTS:REFERENCES} * $::L2_LATENCY;
#$Estimated_Max_LLC_Access_Cycles =   ${L2_RQSTS:MISS} * $::L3_LATENCY;
#$Estimated_Max_Memory_Access_Cycles = $LLC_MISSES * $::MEM_LATENCY;
#*** Note, estimated costs are maximums, and the actual cycles can be 
#*** far less due to overlapping operations, pipelined access and hit-under-miss
-------------------------------------------------------------------------------
Nehalem spec file ($Id: nehalem 321 2011-09-29 09:08:27Z tushar $)

Metric Descriptions:
Unless mentioned otherwise, counts are accumulated across sub-processes/threads

FP Compute uOPS               : Floating point micro-ops executed 
                                This is an approximate measure.
                                FP_COMP_OPS_EXE:SSE_SINGLE_PRECISION +
                                FP_COMP_OPS_EXE:SSE_DOUBLE_PRECISION
MFLOPS wallclock              : Millions of floating point micro-ops per 
                                *wallclock* second
                                FP uOPS / Wallclock usecs
MFLOPS                        : Millions of FP computational micro-ops per second
                                FP Computational uOPS / Real usecs
IPC                           : Instructions retired per cycle
                                INSTRUCTION_RETIRED / UNHALTED_CORE_CYCLES
Instruction Starvation %      : Percent of cycles, where the delivery (front-end)
                                system had no uOPS in queue for the back-end
                                to execute. This could be due to instruction
                                fetch, decode or branch misprediction stalls.
                                100 *(UOPS_ISSUED:STALLED_CYCLES-RESOURCE_STALLS:ANY)
                                / UNHALTED_CORE_CYCLES
Branch Misprediction %        : 100 * BR_MISP_EXEC:ANY/BR_INST_RETIRED:ALL_BRANCHES
Load Store Ratio              : Ratio of loads to stores
                                L1D_CACHE_LD:MESI/L1D_CACHE_ST:MESI
Flops Per Load Store          : FP Compute uOPS / (L1D_CACHE_LD:MESI + L1D_CACHE_ST:MESI)
Flops Per Load Miss           : FP Compute uOPS / L1D_CACHE_LD:I_STATE
Instructions Per Load Miss    : INSTRUCTION_RETIRED / L1D_CACHE_LD:I_STATE

Wallclock seconds             : Unhalted wallclock time. Never counted twice.
                                Not accumulated across sub-processes/threads. 
IO seconds                    : Time spent in seconds doing I/O.
                                This includes any time in I/O, including time
                                outside domain, when the process is waiting
                                for I/O to complete.
                                IO cycles / (Clock Hz)

Cycles In Domain              : Total processor cycles in the PAPI domain 
                                UNHALTED_CORE_CYCLES. Note, this cycle counter is
                                more granular and accurate than Real or Virtual
                                cycles counter. This may lead to situations where
                                this value is measured as higher than even Real
                                cycles.
Real Cycles                   : Always counted, unhalted.
Running Time in Domain %      : 100 * UNHALTED_CORE_CYCLES / Real cycles
Virtual Cycles                : Counted only when executing on the processor. 
IO Cycles %                   : Percent of cycles spent in I/O
                                100 * IO cycles / Real cycles
MPI Cycles %                  : Percent of cycles spent in MPI
                                100 * MPI cycles / Real cycles
MPI Sync Cycles %             : Percent of cycles spent in MPI sync ops
                                100 * MPI Sync cycles / Real cycles
Thread Sync Cycles %          : Percent of cycles spent in thread synchronization
                                100 * Thr Sync cycles / Real cycles

Instructions Retired          : INSTRUCTION_RETIRED
uOPS Issued                   : Micro-ops issued
                                UOPS_ISSUED:ANY
FP uOPS %                     : Percent of micro-ops executed that are FP
                                100 * FP uOPS / uOPS Executed
Branch Instructions %         : Percent of instructions that are branches
                                100 * BR_INST_RETIRED:ALL_BRANCHES / INSTRUCTION_RETIRED
Memory Data uOPS %            : Percent of micro-ops that are loads or stores
                                min(100*(L1D_CACHE_LD:MESI+L1D_CACHE_ST:MESI)/uOPS Executed,
                                    (100 - FP uOPS% - Branch uOPS%))
Integer, Logical or Reg Move %: Non-memory and non-FP-compute micro-ops percent.
                                This includes integer, logical and register 
                                data movement micro-ops. 
                                100 - (Memory Data % +Branch Ins % + FP uOPS %)
#SIMD Integer128 Arith %       : Percent of micro-ops that are 128-bit SIMD Integer Arithmetic
#                                100 * (SIMD_INT_128:PACKED_MPY + SIMD_INT_128:PACKED_ARITH +
#                                       SSEX_UOPS_RETIRED:VECTOR_INTEGER) / uOPS Executed
#SIMD Integer64 Arith %        : Percent of micro-ops that are 64-bit SIMD Integer Arithmetic
#                                100 * (SIMD_INT_64:PACKED_MPY + SIMD_INT_64:PACKED_ARITH) / uOPS Executed
#
#Port0 uOPS %                  : Percent of micro-ops executed on port0.
#                                Port0 issues Integer ALU and Shifts, FP Multiply, 
#                                Divide, SSE Integer ALU and Integer Shuffles
#                                100 * UOPS_EXECUTED:PORT0 / uOPS Executed
#Port1 uOPS %                  : Percent of micro-ops executed on port1
#                                Port 1 issues Integer ALU and LEA, FP Add, 
#                                Complex Integer, SSE Integer Multiply
#                                100 * UOPS_EXECUTED:PORT1 / uOPS Executed
#Port2 Core uOPS %             : Percent of micro-ops executed on port2.
#                                Port2 issues only loads.
#                                100 * UOPS_EXECUTED:PORT2_CORE / uOPS Executed
#Port3 Core uOPS %             : Percent of micro-ops executed on port3.
#                                Port3 issues only Store Address
#                                100 * UOPS_EXECUTED:PORT3_CORE / uOPS Executed
#Port4 Core uOPS %             : Percent of micro-ops executed on port4.
#                                Port4 issues only Store Data
#                                100 * UOPS_EXECUTED:PORT4_CORE / uOPS Executed
#Port5 uOPS %                  : Percent of micro-ops executed on port5.
#                                Port5 issues Integer ALU and Shifts, FP Shuffle, 
#                                FP logical, Branch, SSE Integer ALU and Integer Shuffles
#                                100 * UOPS_EXECUTED:PORT5 / uOPS Executed

Loads Executed                : L1D_CACHE_LD:MESI
Stores Executed               : L1D_CACHE_ST:MESI

L1D Loads                     : L1D_CACHE_LD:MESI
L1D Load Misses               : L1D_CACHE_LD:I_STATE
L1D Load Miss %               : L1D_CACHE_LD:I_STATE / L1D_CACHE_LD:MESI
L1I References                : L1I:HITS + L1I:MISSES
L1I Miss %                    : 100 * L1I:MISSES / (L1I:HITS + L1I:MISSES)
L1D Bandwidth MBytes per sec  : Effective bandwidth delivered by L1D cache
                                (L1D_CACHE_LD:MESI+L1D_CACHE_ST:MESI)
                                * WORD_SIZE_BYTES / Wallclock usecs
L2 to L1 Bandwidth MB/s       : Effective L2 to L1 bandwidth
                                L1D:REPL * L1_LINE_SIZE / Wallclock usecs
L1 to L2 Writeback B/w MB/s   : Effective L1 to L2 write bandwidth
                                L1D_WB_L2:MESI * L1_LINE_SIZE / Wallclock usecs

L2 Load Misses                : L2_RQSTS:LOADS - L2_RQSTS:LD_HIT
L2 Loads                      : L2_RQSTS:LOADS
L2 Load Miss %                : 100 * (L2_RQSTS:LOADS-L2_RQSTS:LD_HIT) / L2_RQSTS:LOADS
L2 Stores                     : L2_DATA_RQSTS:ANY - L2_RQSTS:LOADS
L2 Instruction References     : L2_RQSTS:REFERENCES - L2_DATA_RQSTS:ANY
L2 References                 : L2_RQSTS:REFERENCES
L2 Miss Percent               : 100 * L2_RQSTS:MISS / L2_RQSTS:REFERENCES
LLC to L2_Bandwidth MB/s      : Effective LLC to L2 bandwidth
                                L2_LINES_IN:ANY * L2_LINE_SIZE / Wallclock usecs

LLC Load Misses               : MEM_LOAD_RETIRED:LLC_MISS
LLC References                : L2_RQSTS:MISS
LLC Miss %                    : 100 * LLC_MISSES / L2_RQSTS:MISS
Main Memory References        : LLC_MISSES
Min Memory Bandwidth MB/s     : Minimum memory bandwidth. 
                                We only consider memory references to be
                                LLC misses, ignoring prefetches. The actual
                                bandwidth could be more.
                                LLC_MISSES * L3_LINE_SIZE / Wallclock usecs

DTLB Load Misses              : MEM_LOAD_RETIRED:DTLB_MISS
DTLB Load Page Walks          : DTLB_LOAD_MISSES:WALK_COMPLETED

Issue Stall seconds           : UOPS_ISSUED:STALLED_CYCLES / (clockmhz * 1000000)
Resource Stall seconds        : RESOURCE_STALLS:ANY / (clockmhz * 1000000)
Max L1 Load Miss L2 Hit Stall sec: L2_RQSTS:LD_HIT*2*L2_LATENCY/(clockmhz * 1000000)
                                The factor of two assumes the dirty miss scenario.
Max L2 Load Miss L3 Hit Stall sec: (L2_RQSTS:LOADS - L2_RQSTS:LD_HIT 
                                    - MEM_LOAD_RETIRED:OTHER_CORE_L2_HIT_HITM 
                                    - MEM_LOAD_RETIRED:LLC_MISS)*L3_LATENCY *2
                                 +MEM_LOAD_RETIRED:OTHER_CORE_L2_HIT_HITM*L2_OTHER_LATENCY*2)  
                                 /(clockmhz * 1000000)
                                The factor of two assumes the dirty miss scenario.
Max Memory Read Stall seconds : MEM_LOAD_RETIRED:LLC_MISS* MEM_LATENCY*2/(clockmhz * 1000000)
                                The factor of two assumes the dirty miss scenario.
Max TLB LD Miss Stall seconds : Maximum stall time due to DTLB load misses
                                MEM_LOAD_RETIRED:DTLB_MISS * TLB_MISS_LATENCY 
                                /(clockmhz * 1000000)
Max TLB Page Walk Stall seconds:Maximum load miss DTLB page walk seconds
                                DTLB_LOAD_MISSES:WALK_COMPLETED * TLB_PAGE_WALK_LATENCY 
                                /(clockmhz * 1000000)
Issue Stall Cycles            : Cycles with no issue.
                                This would not include cycles outside domain
                                such as system time or I/O time or time process
                                was not scheduled to run.
                                UOPS_ISSUED:STALLED_CYCLES
Decode Stall Cycles           : Cycles the instruction decoder stalled
                                ILD_STALL:ANY
Resource Stall Cycles         : Cycles stalled because of resource constraints.
                                Resource constraints include no available RS, ROB
                                or Load/Store buffer. These are back-end pipeline stalls.
                                RESOURCE_STALLS:ANY
FP or ALU No Dispatch Cycles  : Cycles where no ALU operation was dispatched.
                                These uOPS are dispatched on port 0, 1 or 5.
                                Reason for these stalls could include no available
                                uOPS to dispatch for these units, or busy units.
                                = UOPS_EXECUTED:PORT015_STALL_CYCLES

RS Full Stall Cycles %        : Percent of resource stalls due to all the
                                reservation units being filled.
                                100* RESOURCE_STALLS:RS_FULL/RESOURCE_STALLS:ANY
Reorder Buffer Stall Cycles % : Percent of resource stalls due to the reorder
                                buffer (ROB) being full.
                                = 100* RESOURCE_STALLS:ROB_FULL / RESOURCE_STALLS:ANY

Instruction Queue Full Stall %: Percent of instruction decoded (ILD) stalls due to
                                the instruction queue being full.
                                = 100 * ILD_STALL:IQ_FULL/ILD_STALL:ANY
-------------------------------------------------------------------------------
